#ifndef HEADERUTILS_H
#define HEADERUTILS_H

#define VALUE_ACCESSOR_DEEP(TYPE,NAME,MEMBER) TYPE NAME() const { return MEMBER; }
#define REFERENCE_ACCESSOR_DEEP(TYPE,NAME,MEMBER) TYPE& NAME() { return MEMBER; }
#define CONST_REFERENCE_ACCESSOR_DEEP(TYPE,NAME,MEMBER) const TYPE& NAME() const { return MEMBER; }
#define MUTATOR_DEEP(TYPE,NAME,MEMBER) void NAME(TYPE NAME) { MEMBER = NAME; }

#define VALUE_ACCESSOR(TYPE,NAME) inline VALUE_ACCESSOR_DEEP(TYPE,NAME,m_##NAME)
#define REFERENCE_ACCESSOR(TYPE,NAME) REFERENCE_ACCESSOR_DEEP(TYPE,NAME,m_##NAME)
#define CONST_REFERENCE_ACCESSOR(TYPE,NAME) CONST_REFERENCE_ACCESSOR_DEEP(TYPE,NAME,m_##NAME)
#define MUTATOR(TYPE,NAME) inline MUTATOR_DEEP(TYPE,NAME,m_##NAME)

#define VALACC_MUT(TYPE,NAME) VALUE_ACCESSOR(TYPE,NAME) MUTATOR(TYPE,NAME)

#define MAP_PUT(TYPE,VAR1,VAR2) inline void put##VAR1(std::string name, TYPE VAR2) { m_##VAR2##s[name] = VAR2; }
#define MAP_HAS(TYPE,VAR1,VAR2) inline bool has##VAR1(std::string name) const { return m_##VAR2##s.count(name); }
#define MAP_GET(TYPE,VAR1,VAR2) inline TYPE get##VAR1(std::string name) { return m_##VAR2##s[name]; }
#define MAP_DELETE_DCLR(TYPE,VAR1,VAR2) inline void delete##VAR1(std::string name, TYPE VAR2);
#define MAP_OPS(TYPE,VAR1,VAR2) MAP_PUT(TYPE,VAR1,VAR2) MAP_HAS(TYPE,VAR1,VAR2) MAP_GET(TYPE,VAR1,VAR2)

#endif // HEADERUTILS_H
