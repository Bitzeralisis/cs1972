                                Children of Gaia
                                   Scripting

1) SYNTAX. _____________________________________________________________________

    COG scripts consist of a list of instructions delimited by newlines, where
    an instruction is a list of arguments delimited by whitespace.

    At the base level, a (listof behavior-definition) is expected.


2) INSTRUCTION CLASSES (GLOBAL). _______________________________________________

    behavior-definition:
    
        behavior-definition: def (behavior-name: string) \ (body: listof action) \ end
    
            There are two special behaviors in COG scripts: the "." behavior
            (which has no actions), which is defined automatically, and the
            "main" behavior, which needs to be defined, and is given to the
            level controller at the start of the level. Behaviors cannot be
            redefined and if a `behavior-name` is given for a previously defined
            behavior, a warning is raised (and the entire body of the behavior
            is invalidated).


    action:
    
        (beat: number) (action-inner)
        q (beat: number) (action-inner)

            Perform an action on `beat`.
            
            In the second form, the game performs the action immediately even if
            the current time is earlier than `beat`. For some actions, this has
            the effect of "queueing" that action to automatically perform in the
            future. For other actions, it will perform now regardless of `beat`.
            Finally, some actions will cause undefined behavior.

            All play actions are recommended to be q'd in order to pre-load it
            and prevent lag when the music needs to be played. spawn and shoot
            can be safely q'd. All other action-inner are unspecified and not
            recommended to be q'd.


    action-inner:

        disappear

            Causes the entity to delete itself.

        crash

            Deal 1 damage to the player.

        set (attribute)

        spawn (enemy-type: string) (behavior-name: string) (initializer: listof attribute)

            By default, the spawned enemy's spatial attributes are equal to the
            spawner's.

        play (file: string) (bpm: number) (offset: number) (loop-start: number) (loop-end: number)

            Plays `file` as a bgm. For seamless transitioning, this is preferred
            to be used with "q". `offset` is given in seconds, and loop-start
            and loop-end are given in beats.

    attribute:

        pos (relative-type) (x: number-nil) (y: number-nil) (z: number-nil)
        vel (relative-type) (x: number-nil) (y: number-nil) (z: number-nil)
        acc (relative-type) (x: number-nil) (y: number-nil) (z: number-nil)

            These three attributes are a special class of attribute known as
            spatial attributes. `relative-type` is either "abs" or "rel" and
            number-nils are either regular numbers or ".", which means that
            dimension should be ignored (so that just x-position can be set, for
            example, with "pos abs 0 . .".

        offset (beats: number)

            This attribute causes all future beat values to have `beats` added
            to them, including values passed to future set offsets.
        

    relative-type:

        abs
        rel


    number-nil: 

        .
        (number)

3) INSTRUCTION CLASSES: CONTROLLER. ____________________________________________

    These are instructions that only the controller (which runs the main
    behavior) may perform.


4) INSTRUCTION CLASSES: ENEMY. _________________________________________________

    These are instructions that only enemies may perform.

    action-inner:

        shoot (travel-time: number) (shot-type: int) (lane: int) (*: pos) (*: vel)

            May only be performed by enemies.

            Note that although * are spatial attributes, in the case of shoot
            their arguments `x`, `y`, and `z` may not be . or it will result in
            undefined behavior.


    attribute:

        targetable (number)


5) ERRORS AND WARNINGS. ________________________________________________________

    Whenever something unexpected shows up while parsing a script, either an
    error or a warning is thrown. In the case of an error, the entire script
    becomes invalid. In the case of a warning, generally it invalidates the
    entire instruction recursively, stopping at a listof.
