                          cs.brown.edu/courses/cs1972
                                  platformer2
                                    by ajlin
                           due: 11:59 PM, 04/22/2016


                                 GRASSDASH III

1) ANNOTATED RUBRIC. ___________________________________________________________

COMPLETE/INCOMPLETE

Retries used: NONE (2 extra retries left)

[ ] Completed a design check
[ ] Participated in playtesting

Geometric Engine Requirements
========================================
[ ] Pathfinding and navigation across a loaded navigation mesh
    [ ] Construct a graph from a navigation mesh loaded from an OBJ file

        Please see src/engine/geometric/geometricmanager.*. The class takes in
        a navigation mesh and builds the pathfinding graph in its constructor.

    [ ] Query for the polygon in the mesh directly under a point
    [ ] Search through the graph for a path between two points (feel free to
        use BFS)
    [ ] Path generation using the simple stupid funnel algorithm

        Please see GeometricManager::nav_*. These methods perform the various
        steps required for string pulling. In general, games will use
        GeometricManager::nav_getPathFrom to get paths.

Game Requirements
========================================
[ ] The game must follow all requirements from platformer2
[ ] The player must be able to toggle a visualization of navigation using a key
    input

    Use [R] to toggle the navigation visualization.

    [ ] The visualization must render the navigation mesh
    [ ] The visualization must render the shortest path from the current player
        position to a target point
    [ ] The target point must be visualized by an ellipsoid (it does not have
        to collide)
    [ ] The player must be able to change the target point by raycasting the
        environment (place the center at the result)
    [ ] The player must be able to change the target point by raycasting the
        target point (place the center at the result)

        Use [F] to raycast to set a new pathfinding destination point.

Global requirements
========================================
[ ] Top-level handin directory contains a Qt project file, a README, and an
    INSTRUCTIONS file
[ ] README has a copy of the rubric with explanations of how to verify
    requirements
[ ] README documents any known bugs
[ ] README indicates number of hours taken
[ ] INSTRUCTIONS contains all information needed to play the game
[ ] Engine and game code logically separated
[ ] Engine code well designed
[ ] Game code well designed
[ ] Runs on department machines
[ ] Does not crash
[ ] Works at 800x600 and fullscreen resolutions
[ ] Runs at 30+ UPS and never dips below 20 UPS unless indicated in the
    specific handout


2) KNOWN BUGS. _________________________________________________________________

    None known.

    A bug where it was possible to walk into corners has been fixed.


3) TIME SPENT. _________________________________________________________________

    11 hours.

